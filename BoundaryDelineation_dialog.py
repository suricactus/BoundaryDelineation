# -*- coding: utf-8 -*-
"""
/***************************************************************************
 BoundaryDelineationDialog
                                 A QGIS plugin
 BoundaryDelineation
 Generated by Plugin Builder: http://g-sherman.github.io/Qgis-Plugin-Builder/
                             -------------------
        begin                : 2018-05-23
        git sha              : $Format:%H$
        copyright            : (C) 2018 by Sophie Crommelink
        email                : s.crommelinck@utwente.nl
        development          : Reiner Borchert, Hansa Luftbild AG MÃ¼nster
        email                : borchert@hansaluftbild.de
 ***************************************************************************/

/***************************************************************************
 *                                                                         *
 *   This program is free software; you can redistribute it and/or modify  *
 *   it under the terms of the GNU General Public License as published by  *
 *   the Free Software Foundation; either version 2 of the License, or     *
 *   (at your option) any later version.                                   *
 *                                                                         *
 ***************************************************************************/
"""

import os

from PyQt5 import uic
from PyQt5.QtCore import QSettings, QTranslator, qVersion, Qt
from PyQt5.QtGui import QIcon, QColor, QPixmap
from PyQt5.QtWidgets import QDialog, QAction, QFileDialog, QToolBar

from qgis.utils import iface

from .DelineationController import DelineationController, BD_SELECT_NONE, BD_SELECT_NODES, BD_SELECT_POLYGONS
from .MapSelectionTool import MapSelectionTool


FORM_CLASS, _ = uic.loadUiType(os.path.join(
    os.path.dirname(__file__), 'BoundaryDelineation_dialog_base.ui'))


class BoundaryDelineationDialog(QDialog, FORM_CLASS):

    dialog = None

    def __init__(self, parent=None):
        """Constructor."""
        super(BoundaryDelineationDialog, self).__init__(parent)
        # Set up the user interface from Designer.
        # After setupUI you can access any designer object by doing
        # self.<objectname>, and you can use autoconnect slots - see
        # http://qt-project.org/doc/qt-4.8/designer-using-a-ui-file.html
        # #widgets-and-dialogs-with-auto-connect
        self.setupUi(self)
        BoundaryDelineationDialog.dialog = self

        # Connect buttons to functions
        # Step I #
        self.rasterInputButton.clicked.connect(self.selectRasterInput)
        self.vectorInputButton.clicked.connect(self.selectVectorInput)
        self.vectorOutputButton.clicked.connect(self.selectVectorOutput)
        self.lineEdit1.editingFinished.connect(self.endEditRasterInput)
        self.lineEdit2.editingFinished.connect(self.endEditVectorInput)
        self.lineEdit3.editingFinished.connect(self.endEditVectorOutput)
        self.createNodesButton.clicked.connect(self.createNodes)
        # Step II #
        self.connectNodesButton.clicked.connect(self.connectNodes)
        self.acceptBoundaryButton.clicked.connect(self.acceptCandidate)
        self.editBoundaryButton.clicked.connect(self.editCandidate)
        self.deleteBoundaryButton.clicked.connect(self.deleteCandidate)
        self.manualDelineationButtton.clicked.connect(self.manualDelineation)
        self.finishDelineationButton.clicked.connect(self.finishDelineation)

        self.selectionPolygonsButton.clicked.connect(self.onSelectionPolygonsButtonClicked)
        self.selectionNodesButton.clicked.connect(self.onSelectionNodesButtonClicked)

        # Connect labels to images
        self._setImage(self.label0, "/icon_its4land.png")
        self._setImage(self.label1, "/icon_ArrowLeft.png")
        self._setImage(self.label2, "/icon_ArrowStraight.png")
        self._setImage(self.label3, "/icon_ArrowRight.png")
        self._setIcon(self.acceptBoundaryButton, "/icon_AcceptLine.png")
        self._setIcon(self.editBoundaryButton, "/icon_EditLine.png")
        self._setIcon(self.deleteBoundaryButton, "/icon_DeleteLine.png")
        self._setIcon(self.finishDelineationButton, "/icon_FinishFlag.png")

        self.lineEdit1.setText(DelineationController.currentInputRasterUri())
        self.lineEdit2.setText(DelineationController.currentInputLineUri())
        self.lineEdit3.setText(DelineationController.currentOutputLineUri())

        if not self.lineEdit2.text() or DelineationController.getNodeLayer(showError=False) is None:
            self.tabWidget.setCurrentWidget(self.StepI)
        else:
            self.tabWidget.setCurrentWidget(self.StepII)
        self._checkButtons()

    def closeEvent(self, event):
        BoundaryDelineationDialog.dialog = None

    def _setImage(self, label, fileName):
        label.setPixmap(QPixmap(os.path.dirname(os.path.realpath(__file__)) + fileName))

    def _setIcon(self, button, fileName):
        button.setIcon(QIcon(os.path.dirname(os.path.realpath(__file__)) + fileName))

    def _checkButtons(self):
        self.vectorInputButton.setEnabled(True)
        self.vectorOutputButton.setEnabled(True)
        self.createNodesButton.setEnabled(True)
        self.connectNodesButton.setEnabled(True)
        candidatesExist = DelineationController.getCandidatesLayer(create=False, showError=False) is not None
        self.acceptBoundaryButton.setEnabled(candidatesExist and bool(DelineationController.outputFileName))
        self.editBoundaryButton.setEnabled(candidatesExist)
        self.deleteBoundaryButton.setEnabled(candidatesExist)
        self.manualDelineationButtton.setEnabled(bool(DelineationController.outputFileName))
        self.finishDelineationButton.setEnabled(DelineationController.getFinalBoundaryLayer(create=False, showError=False) is not None)

    # Step I #
    # Open raster file provided by user in GUI
    def openRasterInput(self, fileName, lineEdit=None):
        if lineEdit is not None:
            lineEdit.setText(fileName)
        DelineationController.openRaster(fileName)
        self._checkButtons()

    # Open vector file provided by user in GUI
    def openVectorInput(self, fileName, lineEdit=None):
        if lineEdit is not None:
            lineEdit.setText(fileName)
        DelineationController.openInputVector(fileName)
        self._checkButtons()

    # Set vector output file according to file path provided by user in GUI
    def openVectorOutput(self, fileName, lineEdit=None):
        if lineEdit is not None:
            lineEdit.setText(fileName)
        DelineationController.openOutputVector(fileName)
        self._checkButtons()

    # Open raster file provided by user in GUI
    def endEditRasterInput(self):
        self.openRasterInput(self.lineEdit1.text())

    # Open vector file provided by user in GUI
    def endEditVectorInput(self):
        self.openVectorInput(self.lineEdit2.text())

    # Set vector output file according to file path provided by user in GUI
    def endEditVectorOutput(self):
        self.openVectorOutput(self.lineEdit3.text())

    # Open raster file provided by user in GUI
    def selectRasterInput(self):
        result = QFileDialog.getOpenFileName(self, 'Open File', '', '*.tif')
        if result:
            self.openRasterInput(result[0], self.lineEdit1)

    # Open vector file provided by user in GUI
    def selectVectorInput(self):
        result = QFileDialog.getOpenFileName(self, 'Open File', '', '*.shp')
        if result:
            self.openVectorInput(result[0], self.lineEdit2)

    # Set vector output file according to file path provided by user in GUI
    def selectVectorOutput(self):
        result = QFileDialog.getSaveFileName(self, 'Save File as', '', '*.shp')
        if result:
            self.openVectorOutput(result[0], self.lineEdit3)

    def onMapToolSet(self, newTool, oldTool):
        if isinstance(oldTool, MapSelectionTool) and not isinstance(newTool, MapSelectionTool):
            DelineationController.toggleSelectionSwitcher(BD_SELECT_NONE)
            self.updateSelectionModeButtons(BD_SELECT_NONE)

    def onSelectionPolygonsButtonClicked(self):
        mode = self.getSelectionMode()
        self.updateSelectionModeButtons(mode)

        DelineationController.toggleSelectionSwitcher(mode)

    def onSelectionNodesButtonClicked(self):
        mode = self.getSelectionMode()
        self.updateSelectionModeButtons(mode)

        DelineationController.toggleSelectionSwitcher(mode)

    def updateSelectionModeButtons(self, mode):
        nodes = False
        polygons = False

        if mode == BD_SELECT_NODES:
            nodes = True
        elif mode == BD_SELECT_POLYGONS:
            polygons = True

        self.selectionNodesButton.setChecked(bool(nodes))
        self.selectionPolygonsButton.setChecked(bool(polygons))

    def getSelectionMode(self):
        if self.selectionNodesButton.isChecked():
            return BD_SELECT_NODES
        elif self.selectionPolygonsButton.isChecked():
            return BD_SELECT_POLYGONS
        else:
            return BD_SELECT_NONE

    # Create nodes where two or more input lines intersect
    def createNodes(self):
        lineLayer = DelineationController.getLineLayer()

        self.createNodesButton.setEnabled(False)

        if lineLayer is not None:
            self.progressBar.setValue(25)

            # Create nodes
            DelineationController.extractVertices(lineLayer)

            self.progressBar.setValue(50)

            DelineationController.polygonizeSegmentsLayer(lineLayer)
            DelineationController.buildGraph(lineLayer)

            self.progressBar.setValue(100)

            # Enable feature selection
            # iface.actionSelect().trigger()

            if DelineationController.getNodeLayer(showError=False) is not None:
                self.tabWidget.setCurrentWidget(self.StepII)

            self._checkButtons()

        self.createNodesButton.setEnabled(True)

        DelineationController.init()

        DelineationController.canvas.mapToolSet.connect(self.onMapToolSet)

    # Step II #
    def connectNodes(self):
        if DelineationController.connectNodes():
            self._checkButtons()

    def acceptCandidate(self):
        if DelineationController.acceptCandidate():
            self._checkButtons()

    def editCandidate(self):
        if DelineationController.editCandidate():
            self._checkButtons()

    def deleteCandidate(self):
        DelineationController.deleteCandidate()
        self._checkButtons()

    def manualDelineation(self):
        DelineationController.manualDelineation()
        self._checkButtons()

    def finishDelineation(self):
        DelineationController.finishDelineation()
        self.lineEdit2.setText("")
        self._checkButtons()
